{"name":"Mimic","tagline":"An API mock service","body":"# MIMIC #\r\n\r\nMimic is an API-compatible mock service for  __Openstack Compute__ and __Rackspace's implementation of Identity and Cloud Load balancers__. It is backed by in-memory data structure rather than a potentially expensive database.\r\n\r\nMimic helps with:\r\n* fast set-up\r\n* instant response\r\n* cost efficient\r\n* enables offline development\r\n* enables ability to test unusual behaviors/errors of an api\r\n* acts as a central repository for mocked responses from services\r\n\r\n### Quick start\r\n\r\nThe fastest way to install and start Mimic is:\r\n\r\n    pip install mimic\r\n    twistd -n mimic\r\n\r\nYou can test the server started successfully by sending this request and checking for the\r\nwelcome message:\r\n\r\n    curl http://localhost:8900\r\n    >> To get started with Mimic, POST an authentication request to:\r\n    >> /identity/v2.0/tokens\r\n\r\nYou can use the command below to test authentication and see your service catalog. The service catalog contains the endpoints for other available APIs.\r\n\r\n    curl -s -XPOST -d '{\"auth\":{\"RAX-KSKEY:apiKeyCredentials\":{\"username\":\"mimic\",\"apiKey\":\"12345\"}}}' http://localhost:8900/identity/v2.0/tokens | python -m json.tool\r\n\r\nIn order to use Mimic with most other projects you just need to override the Authentication Endpoint. In many projects, including the [OpenStack Client CLI](https://wiki.openstack.org/wiki/OpenStackClient) or the [OpenStack Keystone client](https://github.com/openstack/python-keystoneclient/) you can do that by setting the `OS_AUTH_URL` environment variable or the `--os-auth-url` option. For example:\r\n\r\n    keystone --os-username mimic --os-password 1235 --os-auth-url http://localhost:8900/identity/v2.0/ catalog\r\n\r\n### Come join us develop Mimic! Talk to us at ##mimic on irc.freenode.net ###\r\n\r\n#### Build status: ####\r\n[![Build Status](https://travis-ci.org/rackerlabs/mimic.svg?branch=master)](https://travis-ci.org/rackerlabs/mimic)\r\n\r\n[![Coverage Status](https://coveralls.io/repos/rackerlabs/mimic/badge.png)](https://coveralls.io/r/rackerlabs/mimic)\r\n\r\n## Compute ##\r\n\r\n#### Calls supported: ####\r\nhttps://github.com/rackerlabs/mimic/blob/master/mimic/rest/nova_api.py\r\n\r\n1. LIST servers - Lists servers on the tenant, in mimic\r\n2. POST server - Creates a server in mimic *(look at the 'Errors or unusual behaviors supported for compute' below)*\r\n3. GET server - Returns the server, if it exists in mimic else returns a 404\r\n4. DELETE server - Deletes the server, if it exists in mimic else returns 404\r\n5. LIST addresses - Lists the private and public Ips for the given server. 404 if not found.\r\n6. GET image - If the image ID is anything but what is listed in the mimic presets, `invalid_image_ref`\r\n\t\t\t   returns 200. Else returns a 400.\r\n7. GET flavor - If the flavor ID is anything but what is listed in the mimic presets, `invalid_flavor_ref`\r\n\t\t\t   returns 200. Else returns a 400.\r\n8. GET limits - Returns only the absolute limits for compute\r\n\r\n#### Errors or unusual behaviors supported for compute: ####\r\nBased on the metadata ([mimic_presets](https://github.com/rackerlabs/mimic/blob/master/mimic/canned_responses/mimic_presets.py)) provided when a server is being created, a server can be made to behave as follows:\r\n* Fail with the given response message and response code\r\n* Go into an error state on creation\r\n* Remain in building state for the specified amount of time\r\n* Fails to delete the server, with the specified response code for the number of times specified\r\n* Returns 'image not found' or 'flavor not found' responses for specified IDs\r\n\r\nEg:\r\nRequest for create server that remains in building for 120 seconds:\r\n\r\n`{\r\n    \"server\" : {\r\n        \"name\" : \"api-test-server-1\",\r\n        \"imageRef\" : \"3afe97b2-26dc-49c5-a2cc-a2fc8d80c001\",\r\n        \"flavorRef\" : \"2\",\r\n        \"metadata\": {\"server_building\": 120}\r\n    }\r\n }`\r\n\r\n\r\n## Rackspace Auth ##\r\n\r\n#### Calls supported: ####\r\nhttps://github.com/rackerlabs/mimic/blob/master/mimic/rest/auth_api.py\r\n\r\n1. Authenticate - Given a tenant id, username and password, returns the service catalog with links to compute and load balancer links within mimic, and a test token.\r\n2. Impersonate user (Admin call) - Given a token created by mimic in the header, returns a test token for the username.\r\n3. GET endpoints - Given token created by mimic, returns the service catalog for that user.\r\n\r\n\r\n## Cloud Load Balancer ##\r\n\r\n#### Calls supported: ####\r\nhttps://github.com/rackerlabs/mimic/blob/master/mimic/rest/loadbalancer_api.py\r\n\r\n1. LIST load balancers - Lists the load balancers created in mimic\r\n2. POST load balancer - Creates a load balancer *(look at the 'Errors or unusual behaviors supported for cloud load balancers' below)*\r\n3. GET load balancer - Returns the load balancer if it exists, else 404\r\n4. DELETE load balancer - Deletes the load balancer if it exists, else returns 404\r\n5. LIST nodes - Lists the nodes on the load balancer\r\n6. POST node - Creates a node on the load balancer\r\n7. GET node - Returns the node if it exists, else returns 404\r\n8. DELETE node - Deletes the node if it exists, else returns 404\r\n\r\n#### Errors or unusual behaviors supported for cloud load balancers: ####\r\nBased on key and value of the metadata ([mimic_presets](https://github.com/rackerlabs/mimic/blob/master/mimic/canned_responses/mimic_presets.py)) provided when a load balancer is being created, a load balancer can be made to behave as follows:\r\n* Remain in 'BUILD' state for the specified amount of time\r\n* Load balancer goes into 'PENDING-UPDATE' state on every add/delete node for the specified amout of time\r\n* Load balancer goes into 'PENDING-DELETE' state on delete load balancer for the specified amout of time\r\n* Load balancer goes into an error state on creation\r\n\r\nEg:\r\nRequest for create load balancer that is expected to go into 'PENDING-UPDATE' state on every add/delete\r\nnode, for 20 seconds:\r\n\r\n`{\"loadBalancer\": {\"name\": \"a-new-loadbalancer2\", \"protocol\": \"HTTP\", \"virtualIps\": [{\"type\": \"PUBLIC\"}], \"metadata\": [{\"key\": \"lb_pending_update\", \"value\": 20}], \"nodes\": []}}`\r\n\r\n## Mimic Control APIs ##\r\n\r\nWhen any of Mimic's included plugins schedule a timeout, you will need to cause\r\nMimic's internal clock to advance for any of those timeouts to fire.\r\n\r\nYou can do this with the `tick` endpoint, like so:\r\n\r\n    curl -s -XPOST -d '{\"amount\": 1.0}' http://localhost:8900/mimic/v1.1/tick | python -m json.tool\r\n\r\nwhich should result in output like this:\r\n\r\n    {\r\n        \"advanced\": 1.0,\r\n        \"now\": \"1970-01-01T00:00:04.000000Z\"\r\n    }\r\n\r\nNote that Mimic begins its timekeeping when all time began, in 1970.\r\nIf you would prefer to advance Mimic to something resembling the present day instead, a command like this right after Mimic starts up will do that:\r\n\r\n    curl -s -XPOST -d '{\"amount\": '\"$(date +%s)\"'}' http://localhost:8900/mimic/v1.1/tick | python -m json.tool\r\n\r\n\r\n## Mimic does not: ##\r\n* support XML\r\n* validate the auth token\r\n\r\n## Running Mimic on a cloud server ##\r\n1. create a cloud server with an image that by default comes with python 2.7 (eg: ubuntu 12.04) and ssh into it\r\n2. `git clone https://github.com/rackerlabs/mimic.git`\r\n3. `pip install -r requirements.txt` from within the mimic folder (if there is a gcc error, `apt-get install python-dev`)\r\n4. cd into mimic or add the mimic to the PYTHONPATH and run `twistd -n mimic`\r\n\r\n## Running Mimic on Docker ##\r\n\r\nThe repository root has a `Dockerfile` that does what you want. It exposes Mimic on port 8900 by default.\r\n\r\nTo play around with Mimic locally, try:\r\n\r\n```\r\ndocker build -t mimic . && docker run --restart=no --rm=true -p 8900:8900 mimic\r\n```\r\n\r\nThis will expose Mimic on port 8900, so you can access it directly from the host. The default port exposure is intended for communication between containers; see the Docker documentation for more information. If you're using `boot2docker`, run `boot2docker ip` to find the right IP.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}